pico-8 cartridge // http://www.pico-8.com
version 27
__lua__

t=0

function _init()
 ship = {
  type = "ship",
  sp = 1, -- current sprite
  spn = 2, -- how many sprites to animate
  sps = {1,2}, -- which sprites to animate
  animt = 6,  -- total time over which to animate
  x = 60,
  y = 60,
  w = 8,
  h = 8
 }
 info = {
  tie = {
   type = "tie",
   sp = 3,
   x = 0,
   y = 0,
   w = 8,
   h = 8,
   dx = 0,
   dy = 0.5,
   dr = 50,
   bullet = "tie_bullet",
  }
 }
 bullets = {}
 enemies = {}
 bound = {x1 = 0, x2 = 128,
 y1 = 0, y2 = 120}
 ammos = {}
 ammos[0] = {
  sp = 17,  -- sprite
  sx = 0,   -- sfx
  n = 5,    -- qty
  t = 0,    -- last time fired
  df = 30,  -- fire rate
  dr = 100,   -- replenish rate
  mx = 10,  -- max
  dx = 0,   -- speed x
  dy = -2,  -- speed y
  w = 8,
  h = 8,
  type = "bomb",
 }
 ammos[1] = {
  sp = 18,
  sx = 1,
  n = 10,
  t = 0,
  df = 3,
  dr = 25,
  mx = 20,
  dx = 0,
  dy = -3,
  w = 8,
  h = 8,
  type = "bullet",
 }
end

-- a = 0 or 1
function fire(k)
 if (k < 0 or k > 1 or ammos[k].n <= 0) then return end
 a = ammos[k]
 if ((t - a.t) < a.df) then return end
 a.n -= 1
 a.t = t
 local b = copy(a)
 merge(b, {
   x = ship.x,
   y = ship.y,
 })
 add(bullets, b)
 sfx(a.sx, a)
end

-- utils
function copy(a)
 local n = {}
 for k,v in pairs(a) do n[k] = v end
 return n
end

function merge(a,b)
 for k,v in pairs(b) do a[k] = v end
end

function animate(o)
 if o.animt == nil then return end -- not animatable
 local k = t % o.animt
 local i = flr(o.spn * k / o.animt)
 o.sp = o.sps[i + 1]
end

function constrain(o, b)
 if o.x < b.x1 then o.x = b.x1 end
 if o.x + o.w > b.x2 then o.x = b.x2 - o.w end
 if o.y < b.y1 then o.y = b.y1 end
 if o.y + o.h > b.y2 then o.y = b.y2 - o.h end
end

function moveobj(b)
  b.x += b.dx
  b.y += b.dy
end

function spawn(name, initial)
 local e = copy(info[name])
 merge(e, initial)
 return e
end

function rndi(n)
 return flr(rnd(n))
end

-- /utils

function replenish()
 create_enemy()

 -- replenish ammo
 for k,a in pairs(ammos) do
--  local a = ammos[k]
  if ((t % a.dr) == 0 and a.n < a.mx) then
    a.n += 1
  end
 end
end


function create_enemy()
 if ((t % info.tie.dr) == 0) then
  e = spawn("tie", { x=rndi(100), y=0 })
  printh(t.. " spawned: " .. e.x .. " " .. " " .. e.y .." " ..  e.dx .. " ".. e.dy)
  add(enemies, e)
 end
end

function collide(a, b)
 if (a.x > b.x + b.w or
     a.y > b.y + b.h or
     b.x > a.x + a.w or
     b.y > a.y + a.h) then
  return false
 else
  return true
 end
end

function collide_any(obj, objects)
 local collisions = {}
 for o in all(objects) do
  printh("checking collision of " .. obj.w .. " with " .. o.type .. ":" .. o.w)
  if (collide(obj, o)) then add(collisions, o) end
 end
 return collisions
end


function _update()
 t += 1
 animate(ship)
 replenish()
 for b in all(bullets) do
  moveobj(b)
  if b.x < 0 or b.x > 128 or
     b.y < 0 or b.y > 128 then
   del(bullets, b)
  end
 dead_enemies = collide_any(b, enemies)
 for de in all(dead_enemies) do
  del(enemies, de)
 end
 end

 for e in all(enemies) do
  moveobj(e)
 end

 -- buttons
 if btn(‚¨ÜÔ∏è) then ship.y-=1 end
 if btn(‚¨áÔ∏è) then ship.y+=1 end
 if btn(‚¨ÖÔ∏è) then ship.x-=1 end
 if btn(‚û°Ô∏è) then ship.x+=1 end
 constrain(ship, bound)

 if btn(üÖæÔ∏è) then fire(0) end
 if btn(‚ùé) then fire(1) end
end

function _draw()
 cls()
 print(ammos[0].n .. "/" .. ammos[0].mx, 0,120, 7)
 print(ammos[1].n .. "/" .. ammos[1].mx, 80,120, 7)
 spr(ship.sp, ship.x, ship.y)
 for b in all(bullets) do
  spr(b.sp, b.x, b.y)
 end
 for e in all(enemies) do
  spr(e.sp, e.x, e.y)
 end
end
__gfx__
00000000000060000000600050000005000000005000000500000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000060000000600055555555000000005000000500000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000060000000600055f0f855000000005505505500000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000666000006660055fff855000000005555855500000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000060666060606660655555555000000005505505500000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700066666660666666650000005000000005000000500000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000666900096660000000000000000005000000500000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000009060000000609000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000500000000000008500000a5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000555000000000000855a9a9aa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000555000000000000855f98855000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000080000000000000055f88855000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000005a9599a5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000050000005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000a8800005080a08a00a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000009a9a55559a9a889a000a090000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000009889888598898880090090a000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000088888895a88880900a00009000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000888888a5088a88a9000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000080000005808a8089a00a000900000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000090099aaa9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000990aa900090a00000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
0005000002610046200c6301264017650196701b6701b6701a660166400e6300763004620006200f6000a60007600046000060000600006000060000600006000060000600006000060000600016000060000000
000101000000000010160100161028020006202802028020016202402021010006201b03000630120301004009040030700007000070000700007000000000000000000000000000000000000000000000000000
000100001435014650186501d6501f6502365027650296502b6502c6502e6502e6502f6502c6502c6502a650296502865026650216501b65017650146501365011650106500c6500865004650026500000000000
